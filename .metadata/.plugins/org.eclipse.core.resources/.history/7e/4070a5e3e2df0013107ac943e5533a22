package com.designproject.dreamcoding.activity;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.DisplayMetrics;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.RelativeLayout;

import com.designproject.dreamcoding.R;

public class PuzzleActivity extends DefaultActivity {

	private static int RESULT_LOAD_IMAGE = 1;

	//추가한 이미지에 아이디를 붙이기 위한 변수
	int imageId = 1;

	//이미지 이동을 위한 변수
	int startX;
	int startY;
	int imageX;
	int imageY;

	//이미지 회전을 위한 변수
	private ImageView mImageView;
	private Button mBtnRotate;
	private Bitmap mOrgImage;
	private int currentAngle = 0;

	// 한번에 회전해야 되는 각도
	private static final int ROTATE_VALUE = 10;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_puzzle);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); 

		Button buttonLoadImage = (Button) findViewById(R.id.button_loadimage);
		buttonLoadImage.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				Intent i = new Intent(
						Intent.ACTION_PICK,
						android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);

				startActivityForResult(i, RESULT_LOAD_IMAGE);
			}
		});
		
        mBtnRotate = (Button)findViewById(R.id.btn_rotate);
        mBtnRotate.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				int width = mImageView.getWidth();
				int height = mImageView.getHeight();
				currentAngle = ROTATE_VALUE + (currentAngle % 360);
				Bitmap resize = getImageProcess(mOrgImage, currentAngle, width, height);
				mImageView.setImageBitmap(resize);
			}
		});
	}

	@SuppressLint("NewApi")
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);

		//이미지 주소 받아서 추가
		if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {
			Uri selectedImage = data.getData();
			String[] filePathColumn = { MediaStore.Images.Media.DATA };

			DisplayMetrics metrics = new DisplayMetrics();
			getWindowManager().getDefaultDisplay().getMetrics(metrics);

			int width = metrics.widthPixels;
			int height = metrics.heightPixels;

			RelativeLayout imageViewHolder = (RelativeLayout) findViewById(R.id.image_view_holder);

			Cursor cursor = getContentResolver().query(selectedImage,
					filePathColumn, null, null, null);
			cursor.moveToFirst();

			int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
			String picturePath = cursor.getString(columnIndex);
			cursor.close();

			/**TODO
			 * 각각의 이미지뷰에 올바른 이동 모션 주기(현재 : 갱신된 새로운 mImageView로 포커싱이 됨, 그 프레임 밖으로 이미지가 나가지 못함, 이미지가 끝에 다다르면 축소되면서 이동함)
			 */
			
			//이미지뷰 동적 추가
			mImageView = new ImageView(this);
			mImageView.setId(imageId++);
			mOrgImage = BitmapFactory.decodeFile(picturePath);
			mImageView.setImageBitmap(mOrgImage);

			RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(width, height/2);
			mImageView.setLayoutParams(params);

			imageViewHolder.addView(mImageView);

			imageX = (int) mImageView.getX();
			imageY = (int) mImageView.getY();

			mImageView.setOnTouchListener(new OnTouchListener() {

				public boolean onTouch(View v, MotionEvent event) {
					int eid = event.getAction();
					switch (eid) {

					case MotionEvent.ACTION_DOWN:
						startX = (int) event.getRawX();
						startY = (int) event.getRawY();
						break;

					case MotionEvent.ACTION_MOVE:

						int x = (int) event.getRawX();
						int y = (int) event.getRawY();

						//                        v.scrollTo(imageX + startX -  x, imageY + startY -  y);
						//                        Log.i("imagex, startx , x :", imageX + ", " + startX + ", " + x);
						RelativeLayout.LayoutParams mParams = (RelativeLayout.LayoutParams) mImageView.getLayoutParams();

						mParams.leftMargin = Math.max(imageX - (startX -  x), 0);
						mParams.topMargin = Math.max(imageY - (startY -  y), 0);
						mImageView.setLayoutParams(mParams);

						break;



					case MotionEvent.ACTION_UP:
						imageX = (int) mImageView.getX();
						imageY = (int) mImageView.getY();
						break;

					default:
						break;
					}
					return true;
				}
			});

		}
	}

	/**
	 * 이미지 관련 처리를 수행한다.
	 * 회전을 시키며, 이미지를 화면에 맞게 줄인다.
	 * @author master
	 * 2011. 3. 31.
	 */
	private Bitmap getImageProcess(Bitmap bmp, int nRotate, int viewW, int viewH){

		Matrix matrix = new Matrix();

		// 이미지의 해상도를 줄인다.
		/*float scaleWidth = ((float) newWidth) / width;
    float scaleHeight = ((float) newHeight) / height;
    matrix.postScale(scaleWidth, scaleHeight);*/

		matrix.postRotate(nRotate); // 회전
		// 이미지를 회전시킨다
		Bitmap rotateBitmap = Bitmap.createBitmap(bmp, 0, 0, bmp.getWidth(), bmp.getHeight(), matrix, true);

		// View 사이즈에 맞게 이미지를 조절한다.
		//Bitmap resize = Bitmap.createScaledBitmap(rotateBitmap, viewW, viewH, true);

		//return resize;
		return rotateBitmap;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.puzzle, menu);
		return true;
	}

}
